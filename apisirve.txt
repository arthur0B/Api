from flask import Flask, jsonify, request
from flask_cors import CORS  # Importa CORS
from serial_communication import SerialCommunication
import json

app = Flask(__name__)
CORS(app)  # Habilita CORS para todos los endpoints

# Inicializa la comunicaci贸n serial con el ESP32
esp32 = SerialCommunication(port='COM5', baudrate=115200)

@app.route('/connect', methods=['GET'])
def connect():
    esp32.connect()
    return jsonify({"status": "Conexi贸n establecida con el ESP32"})

@app.route('/disconnect', methods=['GET'])
def disconnect():
    esp32.disconnect()
    return jsonify({"status": "Conexi贸n cerrada con el ESP32"})

@app.route('/get_data', methods=['GET'])
def get_data():
    esp32.send_data(json.dumps({"command": "get_data"}))
    response = esp32.read_data()
    if response:
        try:
            data = json.loads(response)
            return jsonify({"status": "Datos recibidos", "data": data})
        except json.JSONDecodeError:
            return jsonify({"status": "Error al decodificar JSON", "data": response})
    return jsonify({"status": "No se recibieron datos del ESP32"})

@app.route('/update_data', methods=['POST'])
def update_data():
    new_data = request.json
    if not new_data:
        return jsonify({"status": "Error: Datos no proporcionados"}), 400

    update_command = {
        "command": "update_data",
        "data": new_data
    }
    esp32.send_data(json.dumps(update_command))
    return jsonify({"status": "Datos de actualizaci贸n enviados", "data": new_data})

if __name__ == '__main__':
    app.run(port=5000, debug=True)
